"""
Script d'export vers Google Sheets
Export automatique des donn√©es de BDE scrap√©es
"""

import pandas as pd
import gspread
from google.oauth2.service_account import Credentials
import glob
import json
import os
from datetime import datetime

class GoogleSheetsExporter:
    """
    Classe pour exporter les donn√©es vers Google Sheets
    """
    
    def __init__(self):
        self.gc = None
        self.worksheet = None
        
    def setup_credentials(self):
        """
        Configure l'authentification Google Sheets
        """
        print("üîê Configuration de l'authentification Google...")
        
        # V√©rifier si le fichier de credentials existe
        creds_file = "data/google_credentials.json"
        
        if not os.path.exists(creds_file):
            print(f"‚ùå Fichier de credentials non trouv√© : {creds_file}")
            print("üìù Pour configurer Google Sheets :")
            print("   1. Va sur https://console.cloud.google.com/")
            print("   2. Cr√©e un nouveau projet ou s√©lectionne un projet existant")
            print("   3. Active l'API Google Sheets")
            print("   4. Cr√©e un compte de service")
            print("   5. T√©l√©charge le fichier JSON des credentials")
            print(f"   6. Renomme-le en 'google_credentials.json' et place-le dans {os.path.abspath('data/')}")
            return False
        
        try:
            # Scopes n√©cessaires pour Google Sheets
            scope = [
                'https://spreadsheets.google.com/feeds',
                'https://www.googleapis.com/auth/drive'
            ]
            
            # Chargement des credentials
            credentials = Credentials.from_service_account_file(creds_file, scopes=scope)
            self.gc = gspread.authorize(credentials)
            
            print("‚úÖ Authentification Google r√©ussie !")
            return True
            
        except Exception as e:
            print(f"‚ùå Erreur d'authentification : {e}")
            return False
    
    def create_or_open_spreadsheet(self, spreadsheet_name="BDE Scraping Results"):
        """
        Cr√©e ou ouvre une feuille Google Sheets
        """
        try:
            print(f"üìä Recherche de la feuille '{spreadsheet_name}'...")
            
            try:
                # Essaie d'ouvrir la feuille existante
                spreadsheet = self.gc.open(spreadsheet_name)
                print(f"‚úÖ Feuille existante trouv√©e : {spreadsheet_name}")
                
            except gspread.SpreadsheetNotFound:
                # Cr√©e une nouvelle feuille
                print(f"üìÑ Cr√©ation d'une nouvelle feuille : {spreadsheet_name}")
                spreadsheet = self.gc.create(spreadsheet_name)
                
                # Rend la feuille publique en lecture (optionnel)
                spreadsheet.share('', perm_type='anyone', role='reader')
                
            # S√©lectionne la premi√®re feuille
            self.worksheet = spreadsheet.sheet1
            
            # URL de la feuille pour l'utilisateur
            sheet_url = f"https://docs.google.com/spreadsheets/d/{spreadsheet.id}"
            print(f"üîó URL de ta feuille Google Sheets : {sheet_url}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Erreur lors de la cr√©ation/ouverture de la feuille : {e}")
            return False
    
    def export_csv_to_sheets(self, csv_file):
        """
        Exporte un fichier CSV vers Google Sheets
        """
        try:
            print(f"üìÅ Lecture du fichier : {csv_file}")
            
            # Lecture du CSV
            df = pd.read_csv(csv_file)
            print(f"üìä {len(df)} lignes √† exporter")
            
            # Vide la feuille existante
            self.worksheet.clear()
            
            # Pr√©pare les donn√©es avec les headers
            data_to_upload = [df.columns.tolist()] + df.values.tolist()
            
            # Upload vers Google Sheets
            print("‚¨ÜÔ∏è  Upload des donn√©es vers Google Sheets...")
            self.worksheet.update('A1', data_to_upload)
            
            # Mise en forme basique
            print("üé® Application du formatage...")
            
            # Header en gras
            self.worksheet.format('1:1', {
                'textFormat': {'bold': True},
                'backgroundColor': {'red': 0.9, 'green': 0.9, 'blue': 0.9}
            })
            
            # Auto-resize des colonnes
            self.worksheet.columns_auto_resize(0, len(df.columns))
            
            # Ajoute un timestamp
            timestamp = datetime.now().strftime("%d/%m/%Y √† %H:%M:%S")
            self.worksheet.update('A{}'.format(len(df) + 3), f"Derni√®re mise √† jour : {timestamp}")
            
            print("‚úÖ Export vers Google Sheets r√©ussi !")
            return True
            
        except Exception as e:
            print(f"‚ùå Erreur lors de l'export : {e}")
            return False
    
    def find_latest_csv(self):
        """
        Trouve le fichier CSV le plus r√©cent
        """
        # Cherche les fichiers CSV clean en premier
        clean_files = glob.glob("data/bde_clean_data_*.csv")
        if clean_files:
            latest_file = max(clean_files, key=os.path.getctime)
            print(f"üìÅ Fichier clean trouv√© : {latest_file}")
            return latest_file
        
        # Sinon cherche les fichiers bruts
        raw_files = glob.glob("data/bde_scraping_results_*.csv")
        if raw_files:
            latest_file = max(raw_files, key=os.path.getctime)
            print(f"üìÅ Fichier brut trouv√© : {latest_file}")
            return latest_file
        
        return None
    
    def export_to_google_sheets(self, csv_file=None):
        """
        Fonction principale d'export
        """
        print("üöÄ D√âBUT DE L'EXPORT VERS GOOGLE SHEETS")
        print("=" * 50)
        
        # Configuration des credentials
        if not self.setup_credentials():
            return False
        
        # Trouve le fichier CSV si non sp√©cifi√©
        if not csv_file:
            csv_file = self.find_latest_csv()
            if not csv_file:
                print("‚ùå Aucun fichier CSV trouv√©")
                return False
        
        # Cr√©e/ouvre la feuille Google Sheets
        if not self.create_or_open_spreadsheet():
            return False
        
        # Export des donn√©es
        if not self.export_csv_to_sheets(csv_file):
            return False
        
        print("=" * 50)
        print("‚úÖ EXPORT GOOGLE SHEETS TERMIN√â !")
        
        return True

def create_credentials_template():
    """
    Cr√©e un template de fichier credentials pour aider l'utilisateur
    """
    template = {
        "type": "service_account",
        "project_id": "TON_PROJECT_ID",
        "private_key_id": "TON_PRIVATE_KEY_ID", 
        "private_key": "-----BEGIN PRIVATE KEY-----\\nTON_PRIVATE_KEY\\n-----END PRIVATE KEY-----\\n",
        "client_email": "TON_SERVICE_ACCOUNT@TON_PROJECT.iam.gserviceaccount.com",
        "client_id": "TON_CLIENT_ID",
        "auth_uri": "https://accounts.google.com/o/oauth2/auth",
        "token_uri": "https://oauth2.googleapis.com/token",
        "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
        "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/TON_SERVICE_ACCOUNT%40TON_PROJECT.iam.gserviceaccount.com"
    }
    
    template_file = "data/google_credentials_template.json"
    with open(template_file, 'w') as f:
        json.dump(template, f, indent=2)
    
    print(f"üìã Template cr√©√© : {template_file}")
    print("üí° Remplace les valeurs 'TON_*' par tes vraies credentials Google")

def main():
    """
    Fonction principale
    """
    print("üéì EXPORT BDE VERS GOOGLE SHEETS")
    print("=" * 60)
    
    # Cr√©e le template si n√©cessaire
    if not os.path.exists("data/google_credentials.json"):
        print("üìã Cr√©ation du template de credentials...")
        create_credentials_template()
        print("\n‚ö†Ô∏è  Configure d'abord tes credentials Google puis relance ce script")
        return
    
    # Lance l'export
    exporter = GoogleSheetsExporter()
    exporter.export_to_google_sheets()

if __name__ == "__main__":
    main() 